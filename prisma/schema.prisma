// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  Podcast Podcast[]

  @@map("users")
}

model Podcast {
  id          String   @id @default(uuid())
  slug        String   @unique
  userId      String   @map("user_id")
  title       String
  description String
  link        String
  image       String?
  speaker     String
  language    String   @default("ja")
  categoryId  String   @map("category_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  User            User              @relation(fields: [userId], references: [id])
  RssFeed         RssFeed[]
  Episode         Episode[]
  BackgroundMusic BackgroundMusic[]

  @@map("podcasts")
}

model RssFeed {
  id          String   @id @default(uuid())
  podcastId   String   @map("podcast_id")
  link        String   @unique
  title       String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  Podcast Podcast    @relation(fields: [podcastId], references: [id])
  Entries RssEntry[]

  @@map("rss_feeds")
}

model RssEntry {
  id          String   @id @default(uuid())
  link        String   @unique
  title       String
  content     String
  publishedAt DateTime @map("published_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  rssFeedId   String   @map("rss_feed_id")
  isNew       Boolean  @default(true) @map("is_new")

  RssFeed        RssFeed          @relation(fields: [rssFeedId], references: [id])
  EpisodeSources EpisodeSources[]

  @@map("rss_entries")
}

model BackgroundMusic {
  id          String   @id @default(uuid())
  podcastId   String   @map("podcast_id")
  name        String
  description String
  audioFile   String   @map("audio_file")
  duration    Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  Podcast Podcast   @relation(fields: [podcastId], references: [id])
  Episode Episode[]

  @@map("background_musics")
}

model Episode {
  id                String    @id @default(uuid())
  podcastId         String    @map("podcast_id")
  title             String
  description       String
  imageUrl          String?   @map("image_url")
  manuscript        String?
  backgroundMusicId String?
  audioUrl          String?   @map("audio_url")
  audioDuration     Int?      @map("audio_duration")
  state             String    @default("draft") // draft, published, deleted
  publishedAt       DateTime? @map("published_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")

  BackgroundMusic BackgroundMusic? @relation(fields: [backgroundMusicId], references: [id])
  Podcast         Podcast          @relation(fields: [podcastId], references: [id])
  EpisodeSources  EpisodeSources[]

  @@map("episodes")
}

model EpisodeSources {
  id         String   @id @default(uuid())
  episodeId  String   @map("episode_id")
  rssEntryId String   @map("rss_entry_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  Episode  Episode  @relation(fields: [episodeId], references: [id])
  RssEntry RssEntry @relation(fields: [rssEntryId], references: [id])

  @@map("episode_sources")
}
